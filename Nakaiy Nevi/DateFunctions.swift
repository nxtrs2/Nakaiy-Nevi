//
//  DateFunctions.swift
//  Nakaiy Nevi
//
//  Created by Simon Shareef on 14/05/2023.
//

import Foundation

/// To Store the Nakaiy ID and Day pair
struct nakaiyIdDay {
    var nId: Int = 0
    var nDay: Int = 0
}

/// Returns the Nakaiy ID and Day pair
/// - Parameters:
///     - none
/// - Returns: nakaiyIdDay object
func getCurrentNakaiyInfo(day: Date) -> nakaiyIdDay {
    
    // This dictionary is based on Shahee's JS dictionary
    // Key: combinaton of month (Jan = 1, Dec = 12) and day (1st day is 01, 31st is 31) Eg: 1202 (December 2nd)
    // The pairs indicate [nakaiy id, day in nakaiy]
    let pair: [Int: [Int]] = [
        101:[2,10],102:[2,11],103:[2,12],104:[2,13],105:[2,14],106:[3,1],107:[3,2],108:[3,3],109:[3,4],110:[3,5],111:[3,6],112:[3,7],113:[3,8],114:[3,9],115:[3,10],116:[3,11],117:[3,12],118:[3,13],119:[4,1],120:[4,2],121:[4,3],122:[4,4],123:[4,5],124:[4,6],125:[4,7],126:[4,8],127:[4,9],128:[4,10],129:[4,11],130:[4,12],131:[4,13],201:[5,1],202:[5,2],203:[5,3],204:[5,4],205:[5,5],206:[5,6],207:[5,7],208:[5,8],209:[5,9],210:[5,10],211:[5,11],212:[5,12],213:[5,13],214:[6,1],215:[6,2],216:[6,3],217:[6,4],218:[6,5],219:[6,6],220:[6,7],221:[6,8],222:[6,9],223:[6,10],224:[6,11],225:[6,12],226:[6,13],227:[7,1],228:[7,2],229:[7,3],301:[7,3],302:[7,4],303:[7,5],304:[7,6],305:[7,7],306:[7,8],307:[7,9],308:[7,10],309:[7,11],310:[7,12],311:[7,13],312:[8,1],313:[8,2],314:[8,3],315:[8,4],316:[8,5],317:[8,6],318:[8,7],319:[8,8],320:[8,9],321:[8,10],322:[8,11],323:[8,12],324:[8,13],325:[8,14],326:[9,1],327:[9,2],328:[9,3],329:[9,4],330:[9,5],331:[9,6],401:[9,7],402:[9,8],403:[9,9],404:[9,10],405:[9,11],406:[9,12],407:[9,13],408:[10,1],409:[10,2],410:[10,3],411:[10,4],412:[10,5],413:[10,6],414:[10,7],415:[10,8],416:[10,9],417:[10,10],418:[10,11],419:[10,12],420:[10,13],421:[10,14],422:[11,1],423:[11,2],424:[11,3],425:[11,4],426:[11,5],427:[11,6],428:[11,7],429:[11,8],430:[11,9],501:[11,10],502:[11,11],503:[11,12],504:[11,13],505:[11,14],506:[12,1],507:[12,2],508:[12,3],509:[12,4],510:[12,5],511:[12,6],512:[12,7],513:[12,8],514:[12,9],515:[12,10],516:[12,11],517:[12,12],518:[12,13],519:[12,14],520:[13,1],521:[13,2],522:[13,3],523:[13,4],524:[13,5],525:[13,6],526:[13,7],527:[13,8],528:[13,9],529:[13,10],530:[13,11],531:[13,12],601:[13,13],602:[13,14],603:[14,1],604:[14,2],605:[14,3],606:[14,4],607:[14,5],608:[14,6],609:[14,7],610:[14,8],611:[14,9],612:[14,10],613:[14,11],614:[14,12],615:[14,13],616:[14,14],617:[15,1],618:[15,2],619:[15,3],620:[15,4],621:[15,5],622:[15,6],623:[15,7],624:[15,8],625:[15,9],626:[15,10],627:[15,11],628:[15,12],629:[15,13],630:[15,14],701:[16,1],702:[16,2],703:[16,3],704:[16,4],705:[16,5],706:[16,6],707:[16,7],708:[16,8],709:[16,9],710:[16,10],711:[16,11],712:[16,12],713:[16,13],714:[16,14],715:[17,1],716:[17,2],717:[17,3],718:[17,4],719:[17,5],720:[17,6],721:[17,7],722:[17,8],723:[17,9],724:[17,10],725:[17,11],726:[17,12],727:[17,13],728:[17,14],729:[18,1],730:[18,2],731:[18,3],801:[18,4],802:[18,5],803:[18,6],804:[18,7],805:[18,8],806:[18,9],807:[18,10],808:[18,11],809:[18,12],810:[18,13],811:[19,1],812:[19,2],813:[19,3],814:[19,4],815:[19,5],816:[19,6],817:[19,7],818:[19,8],819:[19,9],820:[19,10],821:[19,11],822:[19,12],823:[19,13],824:[20,1],825:[20,2],826:[20,3],827:[20,4],828:[20,5],829:[20,6],830:[20,7],831:[20,8],901:[20,9],902:[20,10],903:[20,11],904:[20,12],905:[20,13],906:[20,14],907:[21,1],908:[21,2],909:[21,3],910:[21,4],911:[21,5],912:[21,6],913:[21,7],914:[21,8],915:[21,9],916:[21,10],917:[21,11],918:[21,12],919:[21,13],920:[21,14],921:[22,1],922:[22,2],923:[22,3],924:[22,4],925:[22,5],926:[22,6],927:[22,7],928:[22,8],929:[22,9],930:[22,10],1001:[22,11],1002:[22,12],1003:[22,13],1004:[23,1],1005:[23,2],1006:[23,3],1007:[23,4],1008:[23,5],1009:[23,6],1010:[23,7],1011:[23,8],1012:[23,9],1013:[23,10],1014:[23,11],1015:[23,12],1016:[23,13],1017:[23,14],1018:[24,1],1019:[24,2],1020:[24,3],1021:[24,4],1022:[24,5],1023:[24,6],1024:[24,7],1025:[24,8],1026:[24,9],1027:[24,10],1028:[24,11],1029:[24,12],1030:[24,13],1031:[24,14],1101:[25,1],1102:[25,2],1103:[25,3],1104:[25,4],1105:[25,5],1106:[25,6],1107:[25,7],1108:[25,8],1109:[25,9],1110:[25,10],1111:[25,11],1112:[25,12],1113:[25,13],1114:[26,1],1115:[26,2],1116:[26,3],1117:[26,4],1118:[26,5],1119:[26,6],1120:[26,7],1121:[26,8],1122:[26,9],1123:[26,10],1124:[26,11],1125:[26,12],1126:[26,13],1127:[27,1],1128:[27,2],1129:[27,3],1130:[27,4],1201:[27,5],1202:[27,6],1203:[27,7],1204:[27,8],1205:[27,9],1206:[27,10],1207:[27,11],1208:[27,12],1209:[27,13],1210:[1,1],1211:[1,2],1212:[1,3],1213:[1,4],1214:[1,5],1215:[1,6],1216:[1,7],1217:[1,8],1218:[1,9],1219:[1,10],1220:[1,11],1221:[1,12],1222:[1,13],1223:[2,1],1224:[2,2],1225:[2,3],1226:[2,4],1227:[2,5],1228:[2,6],1229:[2,7],1230:[2,8],1231:[2,9]
    ]
    // Create a nakaiyIdDay object for Now() using getMonthDay()
    let nakaiyIDD = nakaiyIdDay(nId: pair[getMonthDay(day: day)]![0], nDay: pair[getMonthDay(day: day)]![1])

    return nakaiyIDD    //return pair[101]! // ?? [0,0]
}

/// Get the Month and Day combo in the format of 101 (Jan 1st), 1221 (Dec 21) etc
/// This is used for the key in the getCurrentNakaiyInfo()
/// - Returns: an int in the format 101, 1221 etc
func getMonthDay(day: Date) -> Int {
    //var day: Date
    let dtf = DateFormatter()
    dtf.dateFormat = "Mdd"
    //let now = Date.now
    guard let retInt = Int(dtf.string(from: day)) else { return 0 }
    return retInt
    
}

/// Checks if current year is a leap year
/// This function will be used in later releases
/// - Returns: True if it is a leap year
func isLeapYear(year: Int) -> Bool {
    let dateFormatter = DateFormatter()
    dateFormatter.dateFormat = "yyyy-MM-dd"
    return dateFormatter.date(from: "\(String(year))-02-29") != nil
}

extension Date {
    func dayOfWeek() -> String? {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "EEEE"
        return dateFormatter.string(from: self).capitalized
        // or use capitalized(with: locale) if you want
    }
}

func getFormattedDate() -> String {
        let timeZone = TimeZone(secondsFromGMT: 5 * 60 * 60)!
        let dateFormatter = DateFormatter()
        dateFormatter.timeZone = timeZone
        dateFormatter.dateFormat = "EEEE, d MMMM yyyy"
        let dateInGMT5 = Date()
        let dateString = dateFormatter.string(from: dateInGMT5)
        return dateString
}

func GetOrdinal(number: Int) -> String {
    let numberFormatter = NumberFormatter()
    numberFormatter.numberStyle = .ordinal
    return numberFormatter.string(for: number)!
}
